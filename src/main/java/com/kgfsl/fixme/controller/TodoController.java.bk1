package com.kgfsl.fixme.controller;

import com.kgfsl.fixme.model.Todo;
import com.kgfsl.fixme.service.TodoService;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

//@CrossOrigin(origins = "*")
@RestController
//@CrossOrigin(origins = "http://127.0.0.1:5500", maxAge = 3600)

@RequestMapping("/todolist")
public class TodoController {
    @Autowired
    private TodoService todoService;


    
    @RequestMapping(value="/get" ,method=RequestMethod.GET)
    //@GetMapping("/get")
    public @ResponseBody ResponseEntity<List<Todo>> getAll() {
        System.out.println("**********controller**************"+todoService.findAll());
        return new ResponseEntity<>(todoService.findAll(), HttpStatus.OK);
    }

    @PostMapping("/post")
    public ResponseEntity<?> post(@RequestBody Todo todo, UriComponentsBuilder ucBuilder) {
        todoService.saveTodo(todo);
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/get/{id}").buildAndExpand(todo.getId()).toUri());
        return new ResponseEntity<>(headers, HttpStatus.CREATED);

    }

    @GetMapping("/{id}")

    public ResponseEntity<?> findById(@PathVariable Long id) {
        Todo todo=todoService.findOne(id);
        return new ResponseEntity<>(todo,HttpStatus.OK);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateTodo(@PathVariable Long id, @RequestBody Todo todo) {
        todoService.saveTodo(todo);
        return new ResponseEntity<>(todo, HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteTodo(@PathVariable Long id) {
        todoService.delete(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }

}